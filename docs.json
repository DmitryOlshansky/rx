[
	{
		"file": "source\\rx\\algorithm\\all.d",
		"name": "rx.algorithm.all",
		"members": [
			{
				"members": [
					{
						"members": [
							{
								"endchar": 5,
								"name": "all",
								"line": 414,
								"type": "AllObservable!(TObservable, pred)(auto ref TObservable observable)",
								"parameters": [
									{
										"name": "observable",
										"type": "TObservable",
										"storageClass": [
											"auto",
											"ref"
										]
									}
								],
								"endline": 417,
								"char": 39,
								"kind": "function"
							}
						],
						"name": "all",
						"line": 414,
						"parameters": [
							{
								"name": "TObservable",
								"kind": "type"
							}
						],
						"char": 39,
						"kind": "template"
					}
				],
				"name": "all",
				"line": 412,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L420_C1)\n---\nimport rx.subject : SubjectObject;\n\nauto sub = new SubjectObject!int;\n\nbool result = false;\nsub.all!\"a % 2 == 0\"().doSubscribe((bool res) { result = res; });\n\nsub.put(0);\nsub.completed();\nassert(result);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L420_C1)\n",
				"parameters": [
					{
						"name": "pred",
						"defaultAlias": "\"true\"",
						"kind": "alias"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "all",
						"line": 449,
						"type": "AllObservable!TObservable(auto ref TObservable observable)",
						"parameters": [
							{
								"name": "observable",
								"type": "TObservable",
								"storageClass": [
									"auto",
									"ref"
								]
							}
						],
						"endline": 452,
						"char": 27,
						"kind": "function"
					}
				],
				"name": "all",
				"line": 449,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L454_C1)\n---\nimport rx.subject : SubjectObject;\n\nauto sub = new SubjectObject!int;\n\nbool result = false;\nsub.all().doSubscribe((bool res) { result = res; });\n\nsub.put(0);\nsub.completed();\nassert(result);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L454_C1)\n",
				"parameters": [
					{
						"name": "TObservable",
						"kind": "type"
					}
				],
				"char": 27,
				"kind": "template"
			}
		],
		"comment": " This module defines algorithm 'all'\n",
		"kind": "module"
	},
	{
		"file": "source\\rx\\algorithm\\any.d",
		"name": "rx.algorithm.any",
		"members": [
			{
				"members": [
					{
						"members": [
							{
								"endchar": 5,
								"name": "any",
								"line": 307,
								"type": "AnyObservable!(TObservable, pred)(auto ref TObservable observable)",
								"parameters": [
									{
										"name": "observable",
										"type": "TObservable",
										"storageClass": [
											"auto",
											"ref"
										]
									}
								],
								"endline": 310,
								"char": 39,
								"kind": "function"
							}
						],
						"name": "any",
						"line": 307,
						"parameters": [
							{
								"name": "TObservable",
								"kind": "type"
							}
						],
						"char": 39,
						"kind": "template"
					}
				],
				"name": "any",
				"line": 305,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L313_C1)\n---\nimport rx.subject : SubjectObject;\n\nauto sub = new SubjectObject!int;\n\nbool result = false;\nsub.any!(\"a % 2 == 0\").doSubscribe((bool) { result = true; });\n\nassert(result == false);\nsub.put(1);\nassert(result == false);\nsub.put(0);\nassert(result == true);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L313_C1)\n",
				"parameters": [
					{
						"name": "pred",
						"defaultAlias": "\"true\"",
						"kind": "alias"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "any",
						"line": 344,
						"type": "AnyObservable!TObservable(auto ref TObservable observable)",
						"parameters": [
							{
								"name": "observable",
								"type": "TObservable",
								"storageClass": [
									"auto",
									"ref"
								]
							}
						],
						"endline": 347,
						"char": 27,
						"kind": "function"
					}
				],
				"name": "any",
				"line": 344,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L349_C1)\n---\nimport rx.subject : SubjectObject;\n\nauto sub = new SubjectObject!int;\n\nbool result = false;\nsub.any().doSubscribe((bool) { result = true; });\n\nassert(result == false);\nsub.put(1);\nassert(result == true);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L349_C1)\n",
				"parameters": [
					{
						"name": "TObservable",
						"kind": "type"
					}
				],
				"char": 27,
				"kind": "template"
			}
		],
		"comment": " This module defines algorithm 'any'\n",
		"kind": "module"
	},
	{
		"file": "source\\rx\\algorithm\\buffer.d",
		"name": "rx.algorithm.buffer",
		"members": [
			{
				"members": [
					{
						"endchar": 1,
						"name": "buffered",
						"line": 149,
						"type": "BufferedObservable!TObservable(auto ref TObservable observable, size_t bufferSize)",
						"parameters": [
							{
								"name": "observable",
								"type": "TObservable",
								"storageClass": [
									"auto",
									"ref"
								]
							},
							{
								"name": "bufferSize",
								"type": "size_t"
							}
						],
						"endline": 153,
						"char": 34,
						"kind": "function"
					}
				],
				"name": "buffered",
				"line": 149,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L156_C1)\n---\nimport rx.subject : SubjectObject;\nimport std.array : appender;\n\nauto sub = new SubjectObject!int;\nauto buf = appender!(int[]);\n\nauto d = sub.buffered(2).doSubscribe(buf);\n\nsub.put(0);\nsub.put(1);\nassert(buf.data.length == 2);\nassert(buf.data[0] == 0);\nassert(buf.data[1] == 1);\nsub.put(2);\nassert(buf.data.length == 2);\nsub.completed();\nassert(buf.data.length == 3);\nassert(buf.data[2] == 2);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L156_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L179_C1)\n---\nimport rx.subject : SubjectObject;\nimport std.array : appender;\nimport std.parallelism : taskPool, task;\n\nauto sub = new SubjectObject!int;\nauto buf = appender!(int[]);\nauto d = sub.buffered(100).doSubscribe(buf);\n\nimport std.range : iota;\n\nauto t1 = task({ .put(sub, iota(100)); });\nauto t2 = task({ .put(sub, iota(100)); });\nauto t3 = task({ .put(sub, iota(100)); });\ntaskPool.put(t1);\ntaskPool.put(t2);\ntaskPool.put(t3);\n\nt1.workForce;\nt2.workForce;\nt3.workForce;\n\nsub.completed();\n\nassert(buf.data.length == 300);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L179_C1)\n",
				"parameters": [
					{
						"name": "TObservable",
						"kind": "type"
					}
				],
				"char": 34,
				"kind": "template"
			}
		],
		"comment": " This module defines algorithm 'buffer'\n",
		"kind": "module"
	},
	{
		"file": "source\\rx\\algorithm\\combineLatest.d",
		"name": "rx.algorithm.combineLatest",
		"members": [
			{
				"members": [
					{
						"members": [
							{
								"endchar": 5,
								"name": "combineLatest",
								"line": 18,
								"type": "CombineLatestObservable!(f, TObservables)(TObservables observables)",
								"parameters": [
									{
										"name": "observables",
										"type": "TObservables"
									}
								],
								"endline": 22,
								"char": 47,
								"kind": "function"
							}
						],
						"name": "combineLatest",
						"line": 18,
						"parameters": [
							{
								"name": "TObservables",
								"kind": "tuple"
							}
						],
						"constraint": "allSatisfy!(isObservable, TObservables)",
						"char": 47,
						"kind": "template"
					}
				],
				"name": "combineLatest",
				"line": 16,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L26_C1)\n---\nimport rx : SubjectObject, CounterObserver;\n\nauto hello = new SubjectObject!string;\nauto world = new SubjectObject!string;\n\nauto message = combineLatest!((a, b) => a ~ \", \" ~ b ~ \"!\")(hello, world);\n\nauto observer = new CounterObserver!string;\nmessage.doSubscribe(observer);\n\n.put(hello, \"Hello\");\n.put(world, \"world\");\n\nassert(observer.putCount == 1);\nassert(observer.lastValue == \"Hello, world!\");\n\n.put(world, \"D-man\");\nassert(observer.putCount == 2);\nassert(observer.lastValue == \"Hello, D-man!\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L26_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L50_C1)\n---\nimport rx : SubjectObject, CounterObserver, uniq;\n\nauto count1 = new SubjectObject!int;\nauto count2 = new SubjectObject!int;\nauto count3 = new SubjectObject!int;\n\nimport std.algorithm : max;\n\nalias pickMax = combineLatest!max;\nauto observable = pickMax(count1, count2, count3).uniq();\n\nauto observer = new CounterObserver!int;\nobservable.doSubscribe(observer);\n\n.put(count1, 0);\n.put(count2, 0);\n.put(count3, 0);\n\nassert(observer.putCount == 1);\nassert(observer.lastValue == 0);\n\n.put(count1, 10);\nassert(observer.putCount == 2);\nassert(observer.lastValue == 10);\n\n.put(count2, 10);\nassert(observer.putCount == 2);\n\n.put(count3, 11);\nassert(observer.putCount == 3);\nassert(observer.lastValue == 11);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L50_C1)\n",
				"parameters": [
					{
						"name": "f",
						"defaultAlias": "tuple",
						"kind": "alias"
					}
				],
				"char": 1,
				"kind": "template"
			}
		],
		"comment": " This module defines algorithm 'combineLatest'\n",
		"kind": "module"
	},
	{
		"file": "source\\rx\\algorithm\\filter.d",
		"name": "rx.algorithm.filter",
		"members": [
			{
				"members": [
					{
						"members": [
							{
								"endchar": 5,
								"name": "filter",
								"line": 20,
								"type": "(auto ref TObservable observable)",
								"parameters": [
									{
										"name": "observable",
										"type": "TObservable",
										"storageClass": [
											"auto",
											"ref"
										]
									}
								],
								"endline": 82,
								"char": 10,
								"kind": "function",
								"storageClass": [
									"auto"
								]
							}
						],
						"name": "filter",
						"line": 20,
						"parameters": [
							{
								"name": "TObservable",
								"kind": "type"
							}
						],
						"char": 10,
						"kind": "template"
					}
				],
				"name": "filter",
				"line": 18,
				"comment": "Implements the higher order filter function. The predicate is passed to std.functional.unaryFun, and can either accept a string, or any callable that can be executed via pred(element).\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L86_C1)\n---\nimport rx.subject : Subject, SubjectObject;\nimport std.array : appender;\n\nSubject!int sub = new SubjectObject!int;\nauto filtered = sub.filter!(n => n % 2 == 0);\nauto buffer = appender!(int[])();\nauto disposable = filtered.subscribe(buffer);\nscope (exit)\n    disposable.dispose();\n\nsub.put(0);\nsub.put(1);\nsub.put(2);\nsub.put(3);\n\nimport std.algorithm : equal;\n\nassert(equal(buffer.data, [0, 2][]));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L86_C1)\n",
				"parameters": [
					{
						"name": "pred",
						"kind": "alias"
					}
				],
				"char": 1,
				"kind": "template"
			}
		],
		"comment": " This module defines algorithm 'filter'\n",
		"kind": "module"
	},
	{
		"file": "source\\rx\\algorithm\\fold.d",
		"name": "rx.algorithm.fold",
		"members": [
			{
				"members": [
					{
						"endchar": 1,
						"name": "fold",
						"line": 14,
						"type": "(auto ref TObservable observable, Seed seed)",
						"parameters": [
							{
								"name": "observable",
								"type": "TObservable",
								"storageClass": [
									"auto",
									"ref"
								]
							},
							{
								"name": "seed",
								"type": "Seed"
							}
						],
						"endline": 20,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "fold",
				"line": 14,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L22_C1)\n---\nimport rx.subject : SubjectObject;\n\nauto sub = new SubjectObject!int;\nauto sum = sub.fold!\"a+b\"(0);\n\nint result = 0;\nauto disposable = sum.doSubscribe((int n) { result = n; });\nscope (exit)\n    disposable.dispose();\n\nforeach (i; 1 .. 11)\n    sub.put(i);\n\nassert(result == 0);\nsub.completed();\nassert(result == 55);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L22_C1)\n",
				"parameters": [
					{
						"name": "fun",
						"kind": "alias"
					},
					{
						"name": "TObservable",
						"kind": "type"
					},
					{
						"name": "Seed",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			}
		],
		"comment": " This module defines algorithm 'fold'\n",
		"kind": "module"
	},
	{
		"file": "source\\rx\\algorithm\\groupby.d",
		"name": "rx.algorithm.groupby",
		"members": [
			{
				"members": [
					{
						"name": "GroupedObservable",
						"line": 19,
						"members": [],
						"char": 1,
						"kind": "interface"
					}
				],
				"name": "GroupedObservable",
				"line": 19,
				"comment": "\n",
				"parameters": [
					{
						"name": "TKey",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"members": [
							{
								"endchar": 5,
								"name": "groupBy",
								"line": 346,
								"type": "GroupByObservable!(selector, TObservable)(auto ref TObservable observable)",
								"parameters": [
									{
										"name": "observable",
										"type": "TObservable",
										"storageClass": [
											"auto",
											"ref"
										]
									}
								],
								"endline": 351,
								"char": 47,
								"kind": "function"
							}
						],
						"name": "groupBy",
						"line": 346,
						"parameters": [
							{
								"name": "TObservable",
								"kind": "type"
							}
						],
						"char": 47,
						"kind": "template"
					}
				],
				"name": "groupBy",
				"line": 344,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L355_C1)\n---\nauto sub = new SubjectObject!int;\n\nauto group = sub.groupBy!(n => n % 10);\n\nauto tester = new CounterObserver!(typeof(group).ElementType);\nauto disposable = group.subscribe(tester);\n\nsub.put(0);\nassert(tester.putCount == 1);\nassert(tester.lastValue.key == 0);\n\nsub.put(10);\nassert(tester.putCount == 1);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L355_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L373_C1)\n---\nauto sub = new SubjectObject!string;\n\nauto group = sub.groupBy!(text => text);\n\nauto tester = new CounterObserver!(typeof(group).ElementType);\nauto disposable = group.subscribe(tester);\n\nsub.put(\"A\");\nassert(tester.putCount == 1);\nassert(tester.lastValue.key == \"A\");\n\nsub.put(\"B\");\nassert(tester.putCount == 2);\nassert(tester.lastValue.key == \"B\");\n\nsub.put(\"XXX\");\nassert(tester.putCount == 3);\nassert(tester.lastValue.key == \"XXX\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L373_C1)\n",
				"parameters": [
					{
						"name": "selector",
						"kind": "alias"
					}
				],
				"char": 1,
				"kind": "template"
			}
		],
		"comment": " This module defines algorithm 'groupBy'\n",
		"kind": "module"
	},
	{
		"file": "source\\rx\\algorithm\\map.d",
		"name": "rx.algorithm.map",
		"members": [
			{
				"members": [
					{
						"members": [
							{
								"endchar": 5,
								"name": "map",
								"line": 131,
								"type": "MapObservable!(f, TObservable)(auto ref TObservable observable)",
								"parameters": [
									{
										"name": "observable",
										"type": "TObservable",
										"storageClass": [
											"auto",
											"ref"
										]
									}
								],
								"endline": 134,
								"char": 36,
								"kind": "function"
							}
						],
						"name": "map",
						"line": 131,
						"parameters": [
							{
								"name": "TObservable",
								"kind": "type"
							}
						],
						"char": 36,
						"kind": "template"
					}
				],
				"name": "map",
				"line": 129,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L137_C1)\n---\nimport rx.subject;\nimport std.array : appender;\nimport std.conv : to;\n\nSubject!int sub = new SubjectObject!int;\nauto mapped = sub.map!(n => to!string(n));\nstatic assert(isObservable!(typeof(mapped), string));\nstatic assert(isSubscribable!(typeof(mapped), Observer!string));\n\nauto buffer = appender!(string[])();\nauto disposable = mapped.subscribe(buffer);\nscope (exit)\n    disposable.dispose();\n\nsub.put(0);\nsub.put(1);\nsub.put(2);\n\nimport std.algorithm : equal;\n\nassert(equal(buffer.data, [\"0\", \"1\", \"2\"][]));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L137_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L162_C1)\n---\nimport rx.subject;\nimport std.array : appender;\nimport std.conv : to;\n\nSubject!int sub = new SubjectObject!int;\nauto mapped = sub.map!\"a * 2\";\nstatic assert(isObservable!(typeof(mapped), int));\nstatic assert(isSubscribable!(typeof(mapped), Observer!int));\n\nauto buffer = appender!(int[])();\nauto disposable = mapped.subscribe(buffer);\nscope (exit)\n    disposable.dispose();\n\nsub.put(0);\nsub.put(1);\nsub.put(2);\n\nimport std.algorithm : equal;\n\nassert(equal(buffer.data, [0, 2, 4][]));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L162_C1)\n",
				"parameters": [
					{
						"name": "f",
						"kind": "alias"
					}
				],
				"char": 1,
				"kind": "template"
			}
		],
		"comment": " This module defines algorithm 'map'\n",
		"kind": "module"
	},
	{
		"file": "source\\rx\\algorithm\\merge.d",
		"name": "rx.algorithm.merge",
		"members": [
			{
				"members": [
					{
						"endchar": 1,
						"name": "merge",
						"line": 85,
						"type": "MergeObservable!(T1, T2)(auto ref T1 observable1, auto ref T2 observable2)",
						"parameters": [
							{
								"name": "observable1",
								"type": "T1",
								"storageClass": [
									"auto",
									"ref"
								]
							},
							{
								"name": "observable2",
								"type": "T2",
								"storageClass": [
									"auto",
									"ref"
								]
							}
						],
						"endline": 88,
						"char": 26,
						"kind": "function"
					}
				],
				"name": "merge",
				"line": 85,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L90_C1)\n---\nimport rx.subject : SubjectObject;\n\nauto s1 = new SubjectObject!int;\nauto s2 = new SubjectObject!short;\n\nauto merged = s1.merge(s2);\n\nint count = 0;\nauto d = merged.doSubscribe((int n) { count++; });\n\nassert(count == 0);\ns1.put(1);\nassert(count == 1);\ns2.put(2);\nassert(count == 2);\n\nd.dispose();\n\ns1.put(10);\nassert(count == 2);\ns2.put(100);\nassert(count == 2);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L90_C1)\n",
				"parameters": [
					{
						"name": "T1",
						"kind": "type"
					},
					{
						"name": "T2",
						"kind": "type"
					}
				],
				"char": 26,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "merge",
						"line": 245,
						"type": "(auto ref TObservable observable)",
						"parameters": [
							{
								"name": "observable",
								"type": "TObservable",
								"storageClass": [
									"auto",
									"ref"
								]
							}
						],
						"endline": 275,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "merge",
				"line": 245,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L278_C1)\n---\nimport rx.algorithm.groupby : groupBy;\nimport rx.algorithm.map : map;\nimport rx.algorithm.fold : fold;\nimport rx.subject : SubjectObject, CounterObserver;\n\nauto subject = new SubjectObject!int;\nauto counted = subject.groupBy!(n => n % 10).map!(o => o.fold!((a, b) => a + 1)(0)).merge();\n\nauto counter = new CounterObserver!int;\n\nauto disposable = counted.subscribe(counter);\n\nsubject.put(0);\nsubject.put(0);\nassert(counter.putCount == 0);\nsubject.completed();\nassert(counter.putCount == 1);\nassert(counter.lastValue == 2);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L278_C1)\n",
				"parameters": [
					{
						"name": "TObservable",
						"kind": "type"
					}
				],
				"constraint": "isObservable!TObservable && isObservable!(TObservable.ElementType)",
				"char": 6,
				"kind": "template"
			}
		],
		"comment": " This module defines algorithm 'merge'\n",
		"kind": "module"
	},
	{
		"file": "source\\rx\\algorithm\\scan.d",
		"name": "rx.algorithm.scan",
		"members": [
			{
				"members": [
					{
						"members": [
							{
								"endchar": 5,
								"name": "scan",
								"line": 128,
								"type": "(auto ref TObservable observable, TAccumulate seed)",
								"parameters": [
									{
										"name": "observable",
										"type": "TObservable",
										"storageClass": [
											"auto",
											"ref"
										]
									},
									{
										"name": "seed",
										"type": "TAccumulate"
									}
								],
								"endline": 131,
								"char": 10,
								"kind": "function",
								"storageClass": [
									"auto"
								]
							}
						],
						"name": "scan",
						"line": 128,
						"parameters": [
							{
								"name": "TObservable",
								"kind": "type"
							},
							{
								"name": "TAccumulate",
								"kind": "type"
							}
						],
						"char": 10,
						"kind": "template"
					}
				],
				"name": "scan",
				"line": 126,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L134_C1)\n---\nimport rx.subject : SubjectObject;\n\nauto subject = new SubjectObject!int;\n\nauto sum = subject.scan!((a, b) => a + b)(0);\nstatic assert(isObservable!(typeof(sum), int));\n\nimport std.array : appender;\n\nauto buf = appender!(int[]);\nauto disposable = sum.subscribe(buf);\nscope (exit)\n    disposable.dispose();\n\nforeach (_; 0 .. 5)\n{\n    subject.put(1);\n}\n\nauto result = buf.data;\nassert(result.length == 5);\nimport std.algorithm : equal;\n\nassert(equal(result, [1, 2, 3, 4, 5]));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L134_C1)\n",
				"parameters": [
					{
						"name": "f",
						"kind": "alias"
					}
				],
				"char": 1,
				"kind": "template"
			}
		],
		"comment": " This module defines algorithm 'scan'\n",
		"kind": "module"
	},
	{
		"file": "source\\rx\\algorithm\\tee.d",
		"name": "rx.algorithm.tee",
		"members": [
			{
				"members": [
					{
						"members": [
							{
								"endchar": 5,
								"name": "tee",
								"line": 78,
								"type": "TeeObservable!(f, TObservable, TObservable.ElementType)(auto ref TObservable observable)",
								"parameters": [
									{
										"name": "observable",
										"type": "TObservable",
										"storageClass": [
											"auto",
											"ref"
										]
									}
								],
								"endline": 82,
								"char": 61,
								"kind": "function"
							}
						],
						"name": "tee",
						"line": 78,
						"parameters": [
							{
								"name": "TObservable",
								"kind": "type"
							}
						],
						"char": 61,
						"kind": "template"
					}
				],
				"name": "tee",
				"line": 76,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L85_C1)\n---\nimport rx.subject : SubjectObject;\n\nauto sub = new SubjectObject!int;\n\nimport std.array : appender;\n\nauto buf1 = appender!(int[]);\nauto buf2 = appender!(int[]);\n\nimport rx.algorithm : map;\n\nauto disposable = sub.tee!(i => buf1.put(i))().map!(i => i * 2)().subscribe(buf2);\n\nsub.put(1);\nsub.put(2);\ndisposable.dispose();\nsub.put(3);\n\nimport std.algorithm : equal;\n\nassert(equal(buf1.data, [1, 2]));\nassert(equal(buf2.data, [2, 4]));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L85_C1)\n",
				"parameters": [
					{
						"name": "f",
						"kind": "alias"
					}
				],
				"char": 1,
				"kind": "template"
			}
		],
		"comment": " This module defines algorithm 'tee'\n",
		"kind": "module"
	},
	{
		"file": "source\\rx\\disposable.d",
		"name": "rx.disposable",
		"members": [
			{
				"members": [
					{
						"name": "isDisposable",
						"line": 13,
						"deco": "b",
						"init": "is(typeof(()\r\n{\r\nT disposable = void;\r\ndisposable.dispose();\r\n}\r\n()))",
						"char": 15,
						"kind": "variable",
						"storageClass": [
							"enum"
						]
					}
				],
				"name": "isDisposable",
				"line": 11,
				"comment": "Tests if something is a Disposable.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L19_C1)\n---\nstruct A\n{\n    void dispose()\n    {\n    }\n}\n\nclass B\n{\n    void dispose()\n    {\n    }\n}\n\ninterface C\n{\n    void dispose();\n}\n\nstatic assert(isDisposable!A);\nstatic assert(isDisposable!B);\nstatic assert(isDisposable!C);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L19_C1)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "isCancelable",
						"line": 48,
						"init": "isDisposable!T && is(typeof((inout int n = 0)\r\n{\r\nT disposable = void;\r\nbool b = disposable.isDisposed;\r\n}\r\n))",
						"char": 10,
						"kind": "variable",
						"storageClass": [
							"enum"
						]
					}
				],
				"name": "isCancelable",
				"line": 46,
				"comment": "Tests if something is a Cancelable\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L54_C1)\n---\nstruct A\n{\n    bool isDisposed() @property\n    {\n        return true;\n    }\n\n    void dispose()\n    {\n    }\n}\n\nclass B\n{\n    bool isDisposed() @property\n    {\n        return true;\n    }\n\n    void dispose()\n    {\n    }\n}\n\ninterface C\n{\n    bool isDisposed() @property;\n    void dispose();\n}\n\nstatic assert(isCancelable!A);\nstatic assert(isCancelable!B);\nstatic assert(isCancelable!C);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L54_C1)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"name": "Disposable",
				"line": 92,
				"comment": "Wrapper for disposable objects.\n",
				"members": [
					{
						"name": "dispose",
						"line": 95,
						"comment": "\n",
						"deco": "FZv",
						"char": 10,
						"kind": "function",
						"storageClass": [
							"abstract"
						]
					}
				],
				"char": 1,
				"kind": "interface"
			},
			{
				"interfaces": [
					"rx.disposable.Disposable"
				],
				"members": [
					{
						"name": "isDisposed",
						"line": 101,
						"comment": "\n",
						"deco": "FNdZb",
						"char": 10,
						"kind": "function",
						"storageClass": [
							"abstract"
						]
					}
				],
				"name": "Cancelable",
				"line": 98,
				"comment": "Wrapper for cancelable objects.\n",
				"char": 1,
				"kind": "interface"
			},
			{
				"interfaces": [
					"rx.disposable.Cancelable"
				],
				"members": [
					{
						"endchar": 5,
						"name": "isDisposed",
						"line": 109,
						"comment": "\n",
						"deco": "FNdZb",
						"endline": 112,
						"char": 10,
						"kind": "function",
						"overrides": [
							"rx.disposable.Cancelable.isDisposed"
						]
					},
					{
						"name": "isCanceled",
						"line": 114,
						"comment": "\n",
						"char": 22,
						"kind": "alias"
					},
					{
						"endchar": 5,
						"name": "dispose",
						"line": 118,
						"comment": "\n",
						"deco": "FZv",
						"endline": 121,
						"char": 10,
						"kind": "function",
						"overrides": [
							"rx.disposable.Disposable.dispose"
						]
					},
					{
						"name": "cancel",
						"line": 123,
						"comment": "\n",
						"char": 19,
						"kind": "alias"
					}
				],
				"name": "CancellationToken",
				"line": 105,
				"comment": "Simply implements for Cancelable interface. Its propagates notification that operations should be canceled.\n",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [
					{
						"name": "DisposableObject",
						"line": 150,
						"members": [
							{
								"endchar": 5,
								"name": "this",
								"line": 154,
								"comment": "\n",
								"type": "(T disposable)",
								"parameters": [
									{
										"name": "disposable",
										"type": "T"
									}
								],
								"endline": 157,
								"char": 5,
								"kind": "constructor"
							},
							{
								"endchar": 5,
								"name": "dispose",
								"line": 161,
								"comment": "\n",
								"type": "void()",
								"endline": 164,
								"char": 10,
								"kind": "function"
							}
						],
						"char": 1,
						"kind": "class"
					}
				],
				"name": "DisposableObject",
				"line": 150,
				"comment": "Class that implements the Disposable interface and wraps the dispose methods in virtual functions.\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "CancelableObject",
						"line": 170,
						"members": [
							{
								"endchar": 5,
								"name": "this",
								"line": 174,
								"comment": "\n",
								"type": "(T disposable)",
								"parameters": [
									{
										"name": "disposable",
										"type": "T"
									}
								],
								"endline": 177,
								"char": 5,
								"kind": "constructor"
							},
							{
								"endchar": 5,
								"name": "isDisposed",
								"line": 181,
								"comment": "\n",
								"type": "@property bool()",
								"endline": 184,
								"char": 10,
								"kind": "function"
							}
						],
						"char": 1,
						"kind": "class"
					}
				],
				"name": "CancelableObject",
				"line": 170,
				"comment": "Class that implements the Cancelable interface and wraps the  isDisposed property in virtual functions.\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "disposableObject",
						"line": 188,
						"type": "(T disposable)",
						"parameters": [
							{
								"name": "disposable",
								"type": "T"
							}
						],
						"endline": 204,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "disposableObject",
				"line": 188,
				"comment": "Wraps dispose method in virtual functions.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L207_C1)\n---\nint count = 0;\nstruct TestDisposable\n{\n    void dispose()\n    {\n        count++;\n    }\n}\n\nTestDisposable test;\nDisposable disposable = disposableObject(test);\nassert(count == 0);\ndisposable.dispose();\nassert(count == 1);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L207_C1)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"interfaces": [
					"rx.disposable.Disposable"
				],
				"members": [
					{
						"endchar": 5,
						"name": "instance",
						"line": 288,
						"comment": "\n",
						"deco": "FNdZC2rx10disposable10Disposable",
						"endline": 294,
						"char": 23,
						"kind": "function",
						"storageClass": [
							"static"
						]
					}
				],
				"name": "NopDisposable",
				"line": 274,
				"comment": "Defines a instance property that return NOP Disposable.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L297_C1)\n---\nDisposable d1 = NopDisposable.instance;\nDisposable d2 = NopDisposable.instance;\nassert(d1 !is null);\nassert(d1 is d2);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L297_C1)\n",
				"char": 7,
				"kind": "class"
			},
			{
				"interfaces": [
					"rx.disposable.Cancelable"
				],
				"members": [
					{
						"endchar": 5,
						"name": "setDisposable",
						"line": 338,
						"comment": "\n",
						"deco": "FC2rx10disposable10DisposableZv",
						"parameters": [
							{
								"name": "disposable",
								"deco": "C2rx10disposable10Disposable"
							}
						],
						"endline": 344,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "isDisposed",
						"line": 348,
						"comment": "\n",
						"deco": "FNdZb",
						"endline": 351,
						"char": 10,
						"kind": "function",
						"overrides": [
							"rx.disposable.Cancelable.isDisposed"
						]
					},
					{
						"endchar": 5,
						"name": "dispose",
						"line": 355,
						"comment": "\n",
						"deco": "FZv",
						"endline": 362,
						"char": 10,
						"kind": "function",
						"overrides": [
							"rx.disposable.Disposable.dispose"
						]
					}
				],
				"name": "SingleAssignmentDisposable",
				"line": 334,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L368_C1)\n---\nint count = 0;\nclass TestDisposable : Disposable\n{\n    void dispose()\n    {\n        count++;\n    }\n}\n\nauto temp = new SingleAssignmentDisposable;\ntemp.setDisposable(new TestDisposable);\nassert(!temp.isDisposed);\nassert(count == 0);\ntemp.dispose();\nassert(temp.isDisposed);\nassert(count == 1);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L368_C1)\n",
				"char": 7,
				"kind": "class"
			},
			{
				"interfaces": [
					"rx.disposable.Cancelable"
				],
				"members": [
					{
						"endchar": 5,
						"name": "isDisposed",
						"line": 428,
						"comment": "\n",
						"deco": "FNdZb",
						"endline": 431,
						"char": 10,
						"kind": "function",
						"overrides": [
							"rx.disposable.Cancelable.isDisposed"
						]
					},
					{
						"endchar": 5,
						"name": "disposable",
						"line": 434,
						"comment": "\n",
						"deco": "FNdC2rx10disposable10DisposableZv",
						"parameters": [
							{
								"name": "value",
								"deco": "C2rx10disposable10Disposable"
							}
						],
						"endline": 451,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "disposable",
						"line": 454,
						"comment": "\n",
						"deco": "FNdZC2rx10disposable10Disposable",
						"endline": 457,
						"char": 16,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "dispose",
						"line": 461,
						"comment": "\n",
						"deco": "FZv",
						"endline": 475,
						"char": 10,
						"kind": "function",
						"overrides": [
							"rx.disposable.Disposable.dispose"
						]
					}
				],
				"name": "SerialDisposable",
				"line": 418,
				"comment": "\n",
				"char": 1,
				"kind": "class"
			},
			{
				"interfaces": [
					"rx.disposable.Disposable"
				],
				"members": [
					{
						"endchar": 5,
						"name": "signal",
						"line": 534,
						"comment": "\n",
						"deco": "FNdZC2rx4util11EventSignal",
						"endline": 537,
						"char": 17,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "dispose",
						"line": 541,
						"comment": "\n",
						"deco": "FZv",
						"endline": 544,
						"char": 10,
						"kind": "function",
						"overrides": [
							"rx.disposable.Disposable.dispose"
						]
					}
				],
				"name": "SignalDisposable",
				"line": 524,
				"comment": "\n",
				"char": 1,
				"kind": "class"
			},
			{
				"interfaces": [
					"rx.disposable.Disposable"
				],
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 564,
						"comment": "\n",
						"deco": "FAC2rx10disposable10DisposableXCQBdQBd19CompositeDisposable",
						"parameters": [
							{
								"name": "disposables",
								"deco": "AC2rx10disposable10Disposable"
							}
						],
						"endline": 568,
						"originalType": "(Disposable[] disposables...)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "dispose",
						"line": 572,
						"comment": "\n",
						"deco": "FZv",
						"endline": 592,
						"char": 10,
						"kind": "function",
						"overrides": [
							"rx.disposable.Disposable.dispose"
						]
					}
				],
				"name": "CompositeDisposable",
				"line": 560,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L635_C1)\n---\nauto d1 = new SingleAssignmentDisposable;\nauto d2 = new SerialDisposable;\nauto d = new CompositeDisposable(d1, d2);\nd.dispose();\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L635_C1)\n",
				"char": 1,
				"kind": "class"
			},
			{
				"interfaces": [
					"rx.disposable.Disposable"
				],
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 656,
						"comment": "\n",
						"deco": "FDFZvZC2rx10disposable19AnonymousDisposable",
						"parameters": [
							{
								"name": "dispose",
								"deco": "DFZv"
							}
						],
						"endline": 660,
						"originalType": "(void delegate() dispose)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "dispose",
						"line": 664,
						"comment": "\n",
						"deco": "FZv",
						"endline": 671,
						"char": 10,
						"kind": "function",
						"overrides": [
							"rx.disposable.Disposable.dispose"
						]
					}
				],
				"name": "AnonymousDisposable",
				"line": 652,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L677_C1)\n---\nint count = 0;\nauto d = new AnonymousDisposable({ count++; });\nassert(count == 0);\nd.dispose();\nassert(count == 1);\nd.dispose();\nassert(count == 1);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L677_C1)\n",
				"char": 1,
				"kind": "class"
			},
			{
				"interfaces": [
					"rx.disposable.Disposable"
				],
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 693,
						"comment": "\n",
						"deco": "FC2rx10disposable10DisposablebZCQBeQBe18RefCountDisposable",
						"parameters": [
							{
								"name": "disposable",
								"deco": "C2rx10disposable10Disposable"
							},
							{
								"name": "throwWhenDisposed",
								"deco": "b",
								"default": "false"
							}
						],
						"endline": 702,
						"originalType": "(Disposable disposable, bool throwWhenDisposed = false)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "getDisposable",
						"line": 706,
						"comment": "\n",
						"deco": "FZC2rx10disposable10Disposable",
						"endline": 724,
						"char": 16,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "dispose",
						"line": 727,
						"comment": "\n",
						"deco": "FZv",
						"endline": 750,
						"char": 10,
						"kind": "function",
						"overrides": [
							"rx.disposable.Disposable.dispose"
						]
					}
				],
				"name": "RefCountDisposable",
				"line": 689,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L788_C1)\n---\nbool disposed = false;\nauto disposable = new RefCountDisposable(new AnonymousDisposable({\n        disposed = true;\n    }));\n\nauto subscription = disposable.getDisposable();\n\nassert(!disposed);\ndisposable.dispose();\nassert(!disposed);\n\nsubscription.dispose();\nassert(disposed);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L788_C1)\n",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [
					{
						"members": [
							{
								"endchar": 5,
								"name": "withDisposed",
								"line": 875,
								"type": "(auto ref TDisposable disposable)",
								"parameters": [
									{
										"name": "disposable",
										"type": "TDisposable",
										"storageClass": [
											"auto",
											"ref"
										]
									}
								],
								"endline": 881,
								"char": 10,
								"kind": "function",
								"storageClass": [
									"auto"
								]
							}
						],
						"name": "withDisposed",
						"line": 875,
						"parameters": [
							{
								"name": "TDisposable",
								"kind": "type"
							}
						],
						"constraint": "isDisposable!TDisposable",
						"char": 10,
						"kind": "template"
					}
				],
				"name": "withDisposed",
				"line": 873,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L892_C1)\n---\nimport rx;\n\nauto sub = new SubjectObject!int;\nsize_t putCount = 0;\nsize_t disposedCount = 0;\n\nauto disposable = sub.doSubscribe!(_ => putCount++)\n    .withDisposed!(() => disposedCount++);\n\nsub.put(1);\ndisposable.dispose();\n\nassert(putCount == 1);\nassert(disposedCount == 1);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L892_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L911_C1)\n---\nimport rx;\n\nauto sub = new SubjectObject!int;\nsize_t putCount = 0;\n\nbool disposed = false;\nalias traceDispose = withDisposed!(() => disposed = true);\n\nauto disposable = traceDispose(sub.doSubscribe!(_ => putCount++));\n\nsub.put(1);\nsub.completed();\n\nassert(putCount == 1);\nassert(!disposed);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L911_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L931_C1)\n---\nimport rx;\n\nauto sub = new SubjectObject!int;\nsize_t putCount = 0;\n\nbool disposed = false;\nalias traceDispose = withDisposed!(() => disposed = true);\n\nauto disposable = traceDispose(sub.doSubscribe!(_ => putCount++));\n\nsub.put(1);\ndisposable.dispose();\n\nassert(putCount == 1);\nassert(disposed);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L931_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L951_C1)\n---\nimport rx;\n\nauto sub = new SubjectObject!int;\nsize_t putCount = 0;\n\nbool disposed = false;\nauto disposable = sub.doSubscribe!(_ => putCount++).withDisposed(() {\n    disposed = true;\n});\n\nsub.put(1);\ndisposable.dispose();\n\nassert(putCount == 1);\nassert(disposed);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L951_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L971_C1)\n---\nimport rx;\n\nauto sub = new SubjectObject!int;\nsize_t disposedCount = 0;\n\nauto disposable = sub.doSubscribe!((int) {  })\n    .withDisposed!(() { disposedCount++; });\n\ndisposable.dispose();\ndisposable.dispose();\n\nassert(disposedCount == 1);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L971_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L988_C1)\n---\nimport rx;\n\nauto sub = new SubjectObject!int;\nsize_t putCount = 0;\n\nbool disposed = false;\nauto disposable = sub.doSubscribe!(_ => putCount++).withDisposed(() {\n    disposed = true;\n});\n\nsub.put(1);\ndisposable.dispose();\n\nassert(putCount == 1);\nassert(disposed);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L988_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1008_C1)\n---\nimport rx;\n\nauto sub = new SubjectObject!int;\nsize_t disposedCount = 0;\n\nauto disposable = sub.doSubscribe!((int) {  }).withDisposed(() {\n    disposedCount++;\n});\n\ndisposable.dispose();\ndisposable.dispose();\n\nassert(disposedCount == 1);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1008_C1)\n",
				"parameters": [
					{
						"name": "f",
						"kind": "alias"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "withDisposed",
						"line": 885,
						"type": "(auto ref TDisposable disposable, void delegate() disposed)",
						"parameters": [
							{
								"name": "disposable",
								"type": "TDisposable",
								"storageClass": [
									"auto",
									"ref"
								]
							},
							{
								"name": "disposed",
								"type": "void delegate()"
							}
						],
						"endline": 889,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "withDisposed",
				"line": 885,
				"comment": "ditto\n",
				"parameters": [
					{
						"name": "TDisposable",
						"kind": "type"
					}
				],
				"constraint": "isDisposable!TDisposable",
				"char": 6,
				"kind": "template"
			}
		],
		"comment": " This module defines the concept of Disposable.\n",
		"kind": "module"
	},
	{
		"file": "source\\rx\\observable.d",
		"name": "rx.observable",
		"members": [
			{
				"members": [
					{
						"name": "isObservable",
						"line": 16,
						"deco": "b",
						"init": "is(T.ElementType : E) && is(typeof(()\r\n{\r\nT observable = void;\r\nObserver!E observer = void;\r\nauto d = observable.subscribe(observer);\r\nstatic assert(isDisposable!(typeof(d)));\r\n}\r\n()))",
						"char": 15,
						"kind": "variable",
						"storageClass": [
							"enum"
						]
					}
				],
				"name": "isObservable",
				"line": 14,
				"comment": "Tests if something is a Observable.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L33_C1)\n---\nstruct TestObservable\n{\n    alias ElementType = int;\n\n    Disposable subscribe(T)(T observer)\n    {\n        static assert(isObserver!(T, int));\n        return null;\n    }\n}\n\nstatic assert(isObservable!(TestObservable));\nstatic assert(isObservable!(TestObservable, int));\nstatic assert(!isObservable!(TestObservable, Object));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L33_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L52_C1)\n---\nstatic assert(isObservable!(Observable!int));\nstatic assert(!isObservable!(Observer!int));\nstatic assert(!isObservable!(string));\nstatic assert(!isObservable!(Object));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L52_C1)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "isObservable",
						"line": 26,
						"deco": "b",
						"init": "__traits(compiles, ()\r\n{\r\nstatic assert(isObservable!(TObservable, TObservable.ElementType));\r\n}\r\n)",
						"char": 15,
						"kind": "variable",
						"storageClass": [
							"enum"
						]
					}
				],
				"name": "isObservable",
				"line": 24,
				"comment": "ditto\n",
				"parameters": [
					{
						"name": "TObservable",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "isSubscribable",
						"line": 63,
						"deco": "b",
						"init": "is(typeof(()\r\n{\r\nstatic assert(isOutputRange!(TObserver, TObservable.ElementType));\r\nTObservable observable = void;\r\nTObserver observer = void;\r\nauto d = observable.subscribe(observer);\r\nstatic assert(isDisposable!(typeof(d)));\r\n}\r\n()))",
						"char": 15,
						"kind": "variable",
						"storageClass": [
							"enum"
						]
					}
				],
				"name": "isSubscribable",
				"line": 61,
				"comment": "Test if the observer can subscribe to the observable.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L73_C1)\n---\nstruct TestDisposable\n{\n    void dispose()\n    {\n    }\n}\n\nstruct TestObserver\n{\n    void put(int n)\n    {\n    }\n\n    void completed()\n    {\n    }\n\n    void failure(Exception e)\n    {\n    }\n}\n\nstruct TestObservable\n{\n    alias ElementType = int;\n\n    TestDisposable subscribe(TestObserver observer)\n    {\n        return TestDisposable();\n    }\n}\n\nstatic assert(isSubscribable!(TestObservable, TestObserver));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L73_C1)\n",
				"parameters": [
					{
						"name": "TObservable",
						"kind": "type"
					},
					{
						"name": "TObserver",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "doSubscribe",
						"line": 111,
						"type": "(auto ref TObservable observable, void delegate(E) doPut, void delegate() doCompleted, void delegate(Exception) doFailure)",
						"parameters": [
							{
								"name": "observable",
								"type": "TObservable",
								"storageClass": [
									"auto",
									"ref"
								]
							},
							{
								"name": "doPut",
								"type": "void delegate(E)"
							},
							{
								"name": "doCompleted",
								"type": "void delegate()"
							},
							{
								"name": "doFailure",
								"type": "void delegate(Exception)"
							}
						],
						"endline": 115,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "doSubscribe",
				"line": 111,
				"comment": "The helper for subscribe easier.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L172_C1)\n---\nstruct TestObservable\n{\n    alias ElementType = int;\n\n    auto subscribe(TObserver)(TObserver observer)\n    {\n        .put(observer, [0, 1, 2]);\n        return NopDisposable.instance;\n    }\n}\n\nTestObservable observable;\nint[] result;\nobservable.doSubscribe!(n => result ~= n);\nassert(result.length == 3);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L172_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L192_C1)\n---\nstruct TestObserver\n{\n    void put(int n)\n    {\n    }\n}\n\nstruct TestObservable1\n{\n    alias ElementType = int;\n    Disposable subscribe(Observer!int observer)\n    {\n        return null;\n    }\n}\n\nstruct TestObservable2\n{\n    alias ElementType = int;\n    Disposable subscribe(T)(T observer)\n    {\n        return null;\n    }\n}\n\nTestObservable1 o1;\nauto d0 = o1.doSubscribe((int n) {  }, () {  }, (Exception e) {  });\nauto d1 = o1.doSubscribe((int n) {  }, () {  });\nauto d2 = o1.doSubscribe((int n) {  }, (Exception e) {  });\nauto d3 = o1.doSubscribe((int n) {  });\nauto d4 = o1.doSubscribe(TestObserver());\nTestObservable2 o2;\nauto d5 = o2.doSubscribe((int n) {  }, () {  }, (Exception e) {  });\nauto d6 = o2.doSubscribe((int n) {  }, () {  });\nauto d7 = o2.doSubscribe((int n) {  }, (Exception e) {  });\nauto d8 = o2.doSubscribe((int n) {  });\nauto d9 = o2.doSubscribe(TestObserver());\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L192_C1)\n",
				"parameters": [
					{
						"name": "TObservable",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "doSubscribe",
						"line": 117,
						"type": "(auto ref TObservable observable, void delegate(E) doPut, void delegate() doCompleted)",
						"parameters": [
							{
								"name": "observable",
								"type": "TObservable",
								"storageClass": [
									"auto",
									"ref"
								]
							},
							{
								"name": "doPut",
								"type": "void delegate(E)"
							},
							{
								"name": "doCompleted",
								"type": "void delegate()"
							}
						],
						"endline": 121,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "doSubscribe",
				"line": 117,
				"comment": "ditto\n",
				"parameters": [
					{
						"name": "TObservable",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "doSubscribe",
						"line": 123,
						"type": "(auto ref TObservable observable, void delegate(E) doPut, void delegate(Exception) doFailure)",
						"parameters": [
							{
								"name": "observable",
								"type": "TObservable",
								"storageClass": [
									"auto",
									"ref"
								]
							},
							{
								"name": "doPut",
								"type": "void delegate(E)"
							},
							{
								"name": "doFailure",
								"type": "void delegate(Exception)"
							}
						],
						"endline": 127,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "doSubscribe",
				"line": 123,
				"comment": "ditto\n",
				"parameters": [
					{
						"name": "TObservable",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "doSubscribe",
						"line": 129,
						"type": "(auto ref TObservable observable)",
						"parameters": [
							{
								"name": "observable",
								"type": "TObservable",
								"storageClass": [
									"auto",
									"ref"
								]
							}
						],
						"endline": 151,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "doSubscribe",
				"line": 129,
				"comment": "ditto\n",
				"parameters": [
					{
						"name": "f",
						"kind": "alias"
					},
					{
						"name": "TObservable",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "doSubscribe",
						"line": 153,
						"type": "(auto ref TObservable observable, auto ref TObserver observer)",
						"parameters": [
							{
								"name": "observable",
								"type": "TObservable",
								"storageClass": [
									"auto",
									"ref"
								]
							},
							{
								"name": "observer",
								"type": "TObserver",
								"storageClass": [
									"auto",
									"ref"
								]
							}
						],
						"endline": 170,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "doSubscribe",
				"line": 153,
				"comment": "ditto\n",
				"parameters": [
					{
						"name": "TObservable",
						"kind": "type"
					},
					{
						"name": "TObserver",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "Observable",
						"line": 268,
						"members": [],
						"char": 1,
						"kind": "interface"
					}
				],
				"name": "Observable",
				"line": 268,
				"comment": "Wrapper for Observable objects.\n",
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "ObservableObject",
						"line": 294,
						"members": [],
						"char": 1,
						"kind": "class"
					}
				],
				"name": "ObservableObject",
				"line": 294,
				"comment": "Class that implements Observable interface and wraps the subscribe method in virtual function.\n",
				"parameters": [
					{
						"name": "R",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"members": [
							{
								"endchar": 5,
								"name": "observableObject",
								"line": 315,
								"type": "Observable!E(auto ref R observable)",
								"parameters": [
									{
										"name": "observable",
										"type": "R",
										"storageClass": [
											"auto",
											"ref"
										]
									}
								],
								"endline": 325,
								"char": 18,
								"kind": "function"
							}
						],
						"name": "observableObject",
						"line": 315,
						"parameters": [
							{
								"name": "R",
								"kind": "type"
							}
						],
						"char": 18,
						"kind": "template"
					}
				],
				"name": "observableObject",
				"line": 313,
				"comment": "Wraps subscribe method in virtual function.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L328_C1)\n---\nint subscribeCount = 0;\nclass TestObservable : Observable!int\n{\n    Disposable subscribe(Observer!int observer)\n    {\n        subscribeCount++;\n        return NopDisposable.instance;\n    }\n}\n\nauto test = new TestObservable;\nauto observable = observableObject!int(test);\nassert(observable is test);\nassert(subscribeCount == 0);\nauto d = observable.subscribe(null);\nassert(subscribeCount == 1);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L328_C1)\n",
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "defer",
						"line": 444,
						"type": "()",
						"endline": 473,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "defer",
				"line": 444,
				"comment": "Create observable by function that template parameter.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L475_C1)\n---\nauto sub = defer!(int, (observer) {\n    observer.put(1);\n    observer.put(2);\n    observer.put(3);\n    observer.completed();\n});\n\nint countPut = 0;\nint countCompleted = 0;\nstruct A\n{\n    void put(int n)\n    {\n        countPut++;\n    }\n\n    void completed()\n    {\n        countCompleted++;\n    }\n}\n\nassert(countPut == 0);\nassert(countCompleted == 0);\nauto d = sub.doSubscribe(A());\nassert(countPut == 3);\nassert(countCompleted == 1);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L475_C1)\n",
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					},
					{
						"name": "f",
						"kind": "alias"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "empty",
						"line": 792,
						"type": "()",
						"endline": 809,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "empty",
				"line": 792,
				"comment": "\n",
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "never",
						"line": 822,
						"type": "()",
						"endline": 835,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "never",
				"line": 822,
				"comment": "\n",
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "error",
						"line": 845,
						"type": "(auto ref Exception e)",
						"parameters": [
							{
								"name": "e",
								"type": "Exception",
								"storageClass": [
									"auto",
									"ref"
								]
							}
						],
						"endline": 869,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "error",
				"line": 845,
				"comment": "\n",
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "from",
						"line": 882,
						"type": "(auto ref R input)",
						"parameters": [
							{
								"name": "input",
								"type": "R",
								"storageClass": [
									"auto",
									"ref"
								]
							}
						],
						"endline": 906,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "from",
				"line": 882,
				"comment": "\n",
				"parameters": [
					{
						"name": "R",
						"kind": "type"
					}
				],
				"constraint": "isInputRange!R",
				"char": 6,
				"kind": "template"
			},
			{
				"name": "asObservable",
				"line": 908,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L911_C1)\n---\nimport std.range : iota;\n\nauto obs = from(iota(10));\nauto res = new int[10];\nauto d = obs.subscribe(res[]);\nscope (exit)\n    d.dispose();\n\nassert(res.length == 10);\nassert(res[0] == 0);\nassert(res[9] == 9);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L911_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L927_C1)\n---\nimport std.range : iota;\n\nauto obs = iota(10).asObservable();\nauto res = new int[10];\nauto d = obs.subscribe(res[]);\nscope (exit)\n    d.dispose();\n\nassert(res.length == 10);\nassert(res[0] == 0);\nassert(res[9] == 9);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L927_C1)\n",
				"char": 1,
				"kind": "alias"
			}
		],
		"comment": " This module defines the concept of Observable.\n",
		"kind": "module"
	},
	{
		"file": "source\\rx\\observer.d",
		"name": "rx.observer",
		"members": [
			{
				"members": [
					{
						"name": "hasCompleted",
						"line": 13,
						"deco": "b",
						"init": "is(typeof(()\r\n{\r\nT observer = void;\r\nobserver.completed();\r\n}\r\n()))",
						"char": 15,
						"kind": "variable",
						"storageClass": [
							"enum"
						]
					}
				],
				"name": "hasCompleted",
				"line": 10,
				"comment": "Tests if something has completed method.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L20_C1)\n---\nstruct A\n{\n    void completed();\n}\n\nstruct B\n{\n    void _completed();\n}\n\nstatic assert(hasCompleted!A);\nstatic assert(!hasCompleted!B);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L20_C1)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "hasFailure",
						"line": 40,
						"deco": "b",
						"init": "is(typeof(()\r\n{\r\nT observer = void;\r\nException e = void;\r\nobserver.failure(e);\r\n}\r\n()))",
						"char": 15,
						"kind": "variable",
						"storageClass": [
							"enum"
						]
					}
				],
				"name": "hasFailure",
				"line": 37,
				"comment": "Tests if something has failure method.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L48_C1)\n---\nstruct A\n{\n    void failure(Exception e);\n}\n\nstruct B\n{\n    void _failure(Exception e);\n}\n\nstruct C\n{\n    void failure();\n}\n\nstatic assert(hasFailure!A);\nstatic assert(!hasFailure!B);\nstatic assert(!hasFailure!C);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L48_C1)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "isObserver",
						"line": 73,
						"deco": "b",
						"init": "isOutputRange!(T, E) && hasCompleted!T && hasFailure!T",
						"char": 15,
						"kind": "variable",
						"storageClass": [
							"enum"
						]
					}
				],
				"name": "isObserver",
				"line": 71,
				"comment": "Tests if something is Observer.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L76_C1)\n---\nstruct TestObserver\n{\n    void put(int n)\n    {\n    }\n\n    void completed()\n    {\n    }\n\n    void failure(Exception e)\n    {\n    }\n}\n\nstatic assert(isObserver!(TestObserver, int));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L76_C1)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "Observer",
						"line": 97,
						"members": [
							{
								"name": "completed",
								"line": 100,
								"comment": "\n",
								"type": "void()",
								"char": 10,
								"kind": "function"
							},
							{
								"name": "failure",
								"line": 102,
								"comment": "\n",
								"type": "void(Exception e)",
								"parameters": [
									{
										"name": "e",
										"type": "Exception"
									}
								],
								"char": 10,
								"kind": "function"
							}
						],
						"char": 1,
						"kind": "interface"
					}
				],
				"name": "Observer",
				"line": 97,
				"comment": "Wraps completed and failure method in virtual function.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L105_C1)\n---\nalias TObserver = Observer!byte;\nstatic assert(isObserver!(TObserver, byte));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L105_C1)\n",
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "ObserverObject",
						"line": 112,
						"members": [
							{
								"endchar": 5,
								"name": "completed",
								"line": 123,
								"comment": "\n",
								"type": "void()",
								"endline": 129,
								"char": 10,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "failure",
								"line": 131,
								"comment": "\n",
								"type": "void(Exception e)",
								"parameters": [
									{
										"name": "e",
										"type": "Exception"
									}
								],
								"endline": 137,
								"char": 10,
								"kind": "function"
							}
						],
						"char": 1,
						"kind": "class"
					}
				],
				"name": "ObserverObject",
				"line": 112,
				"comment": "Class that implements Observer interface and wraps the completed and failure method in virtual functions. This class extends the OutputRangeObject.\n",
				"parameters": [
					{
						"name": "R",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "tuple"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"members": [
							{
								"endchar": 5,
								"name": "observerObject",
								"line": 146,
								"type": "ObserverObject!(R, E)(R range)",
								"parameters": [
									{
										"name": "range",
										"type": "R"
									}
								],
								"endline": 149,
								"char": 27,
								"kind": "function"
							}
						],
						"name": "observerObject",
						"line": 146,
						"parameters": [
							{
								"name": "R",
								"kind": "type"
							}
						],
						"char": 27,
						"kind": "template"
					}
				],
				"name": "observerObject",
				"line": 144,
				"comment": "Wraps subscribe method in virtual function.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L152_C1)\n---\nstruct TestObserver\n{\n    void put(int n)\n    {\n    }\n\n    void put(Object obj)\n    {\n    }\n}\n\nObserver!int observer = observerObject!int(TestObserver());\nobserver.put(0);\nobserver.completed();\nobserver.failure(null);\nstatic assert(isObserver!(typeof(observer), int));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L152_C1)\n",
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "NopObserver",
						"line": 310,
						"members": [
							{
								"endchar": 5,
								"name": "instance",
								"line": 332,
								"comment": "\n",
								"type": "Observer!E()",
								"endline": 338,
								"char": 23,
								"kind": "function",
								"storageClass": [
									"static"
								]
							}
						],
						"char": 7,
						"kind": "class"
					}
				],
				"name": "NopObserver",
				"line": 310,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L341_C1)\n---\nObserver!int o1 = NopObserver!int.instance;\nObserver!int o2 = NopObserver!int.instance;\nassert(o1 !is null);\nassert(o1 is o2);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L341_C1)\n",
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 7,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "DoneObserver",
						"line": 350,
						"members": [],
						"char": 7,
						"kind": "class"
					}
				],
				"name": "DoneObserver",
				"line": 350,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L398_C1)\n---\nObserver!int o1 = DoneObserver!int.instance;\nObserver!int o2 = DoneObserver!int.instance;\nassert(o1 !is null);\nassert(o1 is o2);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L398_C1)\n",
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 7,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "CompositeObserver",
						"line": 414,
						"members": [
							{
								"endchar": 5,
								"name": "put",
								"line": 429,
								"comment": "\n",
								"type": "void(E obj)",
								"parameters": [
									{
										"name": "obj",
										"type": "E"
									}
								],
								"endline": 433,
								"char": 10,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "completed",
								"line": 435,
								"comment": "\n",
								"type": "void()",
								"endline": 439,
								"char": 10,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "failure",
								"line": 441,
								"comment": "\n",
								"type": "void(Exception e)",
								"parameters": [
									{
										"name": "e",
										"type": "Exception"
									}
								],
								"endline": 445,
								"char": 10,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "add",
								"line": 447,
								"comment": "\n",
								"type": "CompositeObserver!E(Observer!E observer)",
								"parameters": [
									{
										"name": "observer",
										"type": "Observer!E"
									}
								],
								"endline": 450,
								"char": 25,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "remove",
								"line": 452,
								"comment": "\n",
								"type": "Observer!E(Observer!E observer)",
								"parameters": [
									{
										"name": "observer",
										"type": "Observer!E"
									}
								],
								"endline": 466,
								"char": 16,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "empty",
								"line": 470,
								"comment": "\n",
								"type": "CompositeObserver!E()",
								"endline": 476,
								"char": 32,
								"kind": "function",
								"storageClass": [
									"static"
								]
							}
						],
						"char": 8,
						"kind": "class"
					}
				],
				"name": "CompositeObserver",
				"line": 414,
				"comment": "\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L482_C1)\n---\nint count = 0;\nstruct TestObserver\n{\n    void put(int n)\n    {\n        count++;\n    }\n}\n\nauto c1 = new CompositeObserver!int;\nc1.put(0);\nauto o1 = observerObject!int(TestObserver());\nauto c2 = c1.add(o1);\nc1.put(0);\nassert(count == 0);\nc2.put(0);\nassert(count == 1);\nauto c3 = c2.add(observerObject!int(TestObserver()));\nc3.put(0);\nassert(count == 3);\nauto c4 = c3.remove(o1);\nc4.put(0);\nassert(count == 4);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L482_C1)\n",
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 8,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "makeObserver",
						"line": 527,
						"type": "(void delegate(E) doPut, void delegate() doCompleted, void delegate(Exception) doFailure)",
						"parameters": [
							{
								"name": "doPut",
								"type": "void delegate(E)"
							},
							{
								"name": "doCompleted",
								"type": "void delegate()"
							},
							{
								"name": "doFailure",
								"type": "void delegate(Exception)"
							}
						],
						"endline": 566,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "makeObserver",
				"line": 527,
				"comment": "The helper for the own observer.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L632_C1)\n---\nint countPut = 0;\nint countCompleted = 0;\nint countFailure = 0;\n\nauto observer = makeObserver((int) { countPut++; }, () { countCompleted++; }, (Exception) {\n    countFailure++;\n});\n\n.put(observer, 0);\nassert(countPut == 1);\n\nobserver.completed();\nassert(countCompleted == 1);\n\nobserver.failure(null);\nassert(countFailure == 1);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L632_C1)\n",
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "makeObserver",
						"line": 568,
						"type": "(void delegate(E) doPut, void delegate() doCompleted)",
						"parameters": [
							{
								"name": "doPut",
								"type": "void delegate(E)"
							},
							{
								"name": "doCompleted",
								"type": "void delegate()"
							}
						],
						"endline": 598,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "makeObserver",
				"line": 568,
				"comment": "ditto\n",
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "makeObserver",
						"line": 600,
						"type": "(void delegate(E) doPut, void delegate(Exception) doFailure)",
						"parameters": [
							{
								"name": "doPut",
								"type": "void delegate(E)"
							},
							{
								"name": "doFailure",
								"type": "void delegate(Exception)"
							}
						],
						"endline": 630,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "makeObserver",
				"line": 600,
				"comment": "ditto\n",
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			}
		],
		"comment": " This module defines the concept of Observer.\n",
		"kind": "module"
	},
	{
		"file": "source\\rx\\range\\package.d",
		"name": "rx.range",
		"members": [],
		"comment": " This module defines some operations like range.\nExample:\nOverview$(DDOX_UNITTEST_HEADER __unittest_L13_C1)\n---\nimport rx : SubjectObject, observerObject, drop, take;\nimport std.algorithm : equal;\nimport std.array : appender;\nimport std.conv : to;\n\nauto subject = new SubjectObject!int;\nauto pub = subject.drop(2).take(3);\n\nauto buf = appender!(int[]);\nauto disposable = pub.subscribe(observerObject!int(buf));\n\nforeach (i; 0 .. 10)\n{\n    subject.put(i);\n}\n\nauto result = buf.data;\nassert(equal(result, [2, 3, 4]));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L13_C1)\n",
		"kind": "module"
	},
	{
		"file": "source\\rx\\subject.d",
		"name": "rx.subject",
		"members": [
			{
				"members": [
					{
						"name": "Subject",
						"line": 15,
						"members": [],
						"char": 1,
						"kind": "interface"
					}
				],
				"name": "Subject",
				"line": 15,
				"comment": "Represents an object that is both an observable sequence as well as an observer.\n",
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "SubjectObject",
						"line": 20,
						"members": [
							{
								"endchar": 5,
								"name": "this",
								"line": 26,
								"comment": "\n",
								"type": "()",
								"endline": 29,
								"char": 5,
								"kind": "constructor"
							},
							{
								"endchar": 5,
								"name": "put",
								"line": 33,
								"comment": "\n",
								"type": "void(E obj)",
								"parameters": [
									{
										"name": "obj",
										"type": "E"
									}
								],
								"endline": 37,
								"char": 10,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "completed",
								"line": 39,
								"comment": "\n",
								"type": "void()",
								"endline": 53,
								"char": 10,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "failure",
								"line": 55,
								"comment": "\n",
								"type": "void(Exception error)",
								"parameters": [
									{
										"name": "error",
										"type": "Exception"
									}
								],
								"endline": 69,
								"char": 10,
								"kind": "function"
							},
							{
								"members": [
									{
										"endchar": 5,
										"name": "subscribe",
										"line": 72,
										"type": "Disposable(T observer)",
										"parameters": [
											{
												"name": "observer",
												"type": "T"
											}
										],
										"endline": 75,
										"char": 16,
										"kind": "function"
									}
								],
								"name": "subscribe",
								"line": 72,
								"comment": "\n",
								"parameters": [
									{
										"name": "T",
										"kind": "type"
									}
								],
								"char": 16,
								"kind": "template"
							},
							{
								"endchar": 5,
								"name": "subscribe",
								"line": 77,
								"comment": "\n",
								"type": "Disposable(Observer!E observer)",
								"parameters": [
									{
										"name": "observer",
										"type": "Observer!E"
									}
								],
								"endline": 114,
								"char": 16,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "unsubscribe",
								"line": 117,
								"comment": "\n",
								"type": "void(Observer!E observer)",
								"parameters": [
									{
										"name": "observer",
										"type": "Observer!E"
									}
								],
								"endline": 141,
								"char": 10,
								"kind": "function"
							}
						],
						"char": 1,
						"kind": "class"
					}
				],
				"name": "SubjectObject",
				"line": 20,
				"comment": "Represents an object that is both an observable sequence as well as an observer. Each notification is broadcasted to all subscribed observers.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L148_C1)\n---\nimport std.array : appender;\n\nauto data = appender!(int[])();\nauto subject = new SubjectObject!int;\nauto disposable = subject.subscribe(observerObject!(int)(data));\nassert(disposable !is null);\nsubject.put(0);\nsubject.put(1);\n\nimport std.algorithm : equal;\n\nassert(equal(data.data, [0, 1]));\n\ndisposable.dispose();\nsubject.put(2);\nassert(equal(data.data, [0, 1]));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L148_C1)\n",
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "AsyncSubject",
						"line": 295,
						"members": [
							{
								"endchar": 5,
								"name": "subscribe",
								"line": 299,
								"comment": "\n",
								"type": "Disposable(Observer!E observer)",
								"parameters": [
									{
										"name": "observer",
										"type": "Observer!E"
									}
								],
								"endline": 333,
								"char": 16,
								"kind": "function"
							},
							{
								"members": [
									{
										"endchar": 5,
										"name": "subscribe",
										"line": 336,
										"type": "(T observer)",
										"parameters": [
											{
												"name": "observer",
												"type": "T"
											}
										],
										"endline": 339,
										"char": 10,
										"kind": "function",
										"storageClass": [
											"auto"
										]
									}
								],
								"name": "subscribe",
								"line": 336,
								"comment": "\n",
								"parameters": [
									{
										"name": "T",
										"kind": "type"
									}
								],
								"char": 10,
								"kind": "template"
							},
							{
								"endchar": 5,
								"name": "unsubscribe",
								"line": 342,
								"comment": "\n",
								"type": "void(Observer!E observer)",
								"parameters": [
									{
										"name": "observer",
										"type": "Observer!E"
									}
								],
								"endline": 357,
								"char": 10,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "put",
								"line": 361,
								"comment": "\n",
								"type": "void(E value)",
								"parameters": [
									{
										"name": "value",
										"type": "E"
									}
								],
								"endline": 371,
								"char": 10,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "completed",
								"line": 374,
								"comment": "\n",
								"type": "void()",
								"endline": 411,
								"char": 10,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "failure",
								"line": 414,
								"comment": "\n",
								"type": "void(Exception e)",
								"parameters": [
									{
										"name": "e",
										"type": "Exception"
									}
								],
								"endline": 437,
								"char": 10,
								"kind": "function"
							}
						],
						"char": 1,
						"kind": "class"
					}
				],
				"name": "AsyncSubject",
				"line": 295,
				"comment": "\n",
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "BehaviorSubject",
						"line": 678,
						"members": [
							{
								"endchar": 5,
								"name": "this",
								"line": 682,
								"comment": "\n",
								"type": "()",
								"endline": 685,
								"char": 5,
								"kind": "constructor"
							},
							{
								"endchar": 5,
								"name": "this",
								"line": 688,
								"comment": "\n",
								"type": "(E value)",
								"parameters": [
									{
										"name": "value",
										"type": "E"
									}
								],
								"endline": 692,
								"char": 5,
								"kind": "constructor"
							},
							{
								"endchar": 5,
								"name": "value",
								"line": 696,
								"comment": "\n",
								"type": "inout @property inout(E)()",
								"endline": 699,
								"char": 14,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "value",
								"line": 702,
								"comment": "\n",
								"type": "@property void(E value)",
								"parameters": [
									{
										"name": "value",
										"type": "E"
									}
								],
								"endline": 709,
								"char": 10,
								"kind": "function"
							},
							{
								"members": [
									{
										"endchar": 5,
										"name": "subscribe",
										"line": 713,
										"type": "(auto ref TObserver observer)",
										"parameters": [
											{
												"name": "observer",
												"type": "TObserver",
												"storageClass": [
													"auto",
													"ref"
												]
											}
										],
										"endline": 717,
										"char": 10,
										"kind": "function",
										"storageClass": [
											"auto"
										]
									}
								],
								"name": "subscribe",
								"line": 713,
								"comment": "\n",
								"parameters": [
									{
										"name": "TObserver",
										"kind": "type"
									}
								],
								"char": 10,
								"kind": "template"
							},
							{
								"endchar": 5,
								"name": "subscribe",
								"line": 720,
								"comment": "\n",
								"type": "Disposable(Observer!E observer)",
								"parameters": [
									{
										"name": "observer",
										"type": "Observer!E"
									}
								],
								"endline": 724,
								"char": 16,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "put",
								"line": 727,
								"comment": "\n",
								"type": "void(E obj)",
								"parameters": [
									{
										"name": "obj",
										"type": "E"
									}
								],
								"endline": 730,
								"char": 10,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "completed",
								"line": 733,
								"comment": "\n",
								"type": "void()",
								"endline": 736,
								"char": 10,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "failure",
								"line": 739,
								"comment": "\n",
								"type": "void(Exception e)",
								"parameters": [
									{
										"name": "e",
										"type": "Exception"
									}
								],
								"endline": 742,
								"char": 10,
								"kind": "function"
							}
						],
						"char": 1,
						"kind": "class"
					}
				],
				"name": "BehaviorSubject",
				"line": 678,
				"comment": "\n",
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			}
		],
		"comment": " This module defines the Subject and some implements.\n",
		"kind": "module"
	}
]